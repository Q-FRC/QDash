# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  workflow_call:
    inputs:
      build_type:
        description: Type of build (Debug, Release, RelWithDebInfo, MinSizeRel)
        type: string
        default: Debug
      devel:
        description: Whether or not this is a development build
        type: string
        default: true

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: ubuntu-24.04
            arch: amd64
            pkg_arch: legacy

          - runs-on: ubuntu-24.04-arm
            arch: aarch64
            pkg_arch: aarch64

    runs-on: ${{ matrix.runs-on }}
    name: "Linux (${{ matrix.arch }})"
    container: ghcr.io/pkgforge-dev/archlinux:latest

    steps:
      - name: Install git
        run: pacman -S --noconfirm git

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          chmod +x ./.ci/linux/get-dependencies.sh
          ./.ci/linux/get-dependencies.sh

      - name: Setup CCache
        if: matrix.arch != 'aarch64'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ inputs.build_type }}

      - name: Cache Build Deps
        uses: actions/cache@v4
        with:
          path: build/_deps/*-src
          key: QDash

      - name: Configure & Build
        run: |
          export TARGET=appimage
          export BUILD_TYPE=${{ inputs.build_type }}

          chmod a+x .ci/linux/build.sh
          .ci/linux/build.sh ${{ matrix.pkg_arch }}
      
      - name: Package (AppImage)
        run: |
          export DEVEL=${{ inputs.devel }}

          chmod a+x .ci/linux/build.sh
          .ci/linux/package.sh ${{ matrix.pkg_arch }}

      - name: Package (binary)
        run: |
          cmake --install build --prefix install/usr

          cd install
          tar --owner root --group root -czf ../QDash.tar.zst *

      - name: Upload Binary
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary-${{ matrix.arch }}
          path: QDash.tar.zst

      - name: Upload AppImage
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage-${{ matrix.arch }}
          path: ./*.AppImage*

  windows:
    name: "Windows (${{ matrix.arch }})"
    runs-on: ${{ matrix.runs-on }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: windows-latest
            arch: amd64
            qt_arch: win64_msvc2022_64
            qt_version: 6.9.1
            qt_modules: qtmultimedia
            ccache: true

          - runs-on: windows-11-arm
            arch: arm64
            qt_arch: win64_msvc2022_arm64
            qt_version: 6.9.1
            qt_modules: qtmultimedia
            ccache: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_version }}
          modules: ${{ matrix.qt_modules }}
          cache: 'true'

      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - uses: repolevedavaj/install-nsis@v1.0.2
        with:
          nsis-version: 3.09

      - name: Install Python Dependencies
        run: |
          pip install jinja2

      - name: Setup CCache
        if: matrix.arch != 'arm64'
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ inputs.build_type }}

      - name: Cache Build Deps
        uses: actions/cache@v4
        with:
          path: build/_deps/*-src
          key: QDash

      - name: Build
        shell: bash
        run: |
          export PATH="${PATH}:${{ runner.workspace }}/Qt/${{ matrix.qt_version }}/${{ matrix.qt_arch }}/bin"
          export DEVEL=true
          export WINDEPLOYQT=windeployqt
          export USE_CCACHE=${{ matrix.ccache }}

          ./.ci/windows/build.sh

      - name: Package (Binary)
        shell: bash
        run: |
          export ARCH=${{ matrix.arch }}
          ./.ci/windows/package.sh

      - name: Package (Installer)
        shell: cmd
        run: |
          cd build/pkg
          makensis -NOCD "../dist/win_install.nsi"

      - name: Upload (Binary)
        uses: actions/upload-artifact@v4.6.2
        with:
          name: windows-${{ matrix.arch }}
          path: artifacts/*

      - name: Upload (Installer)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-setup-${{ matrix.arch }}
          path: QDash-Setup.exe

  macos:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: macos-latest

    runs-on: ${{ matrix.runs-on }}
    name: "macOS (universal)"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install CMake
        uses: lukka/get-cmake@v4.0.1

      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ runner.os }}-${{ inputs.build_type }}

      - name: Cache Build Deps
        uses: actions/cache@v4
        with:
          path: build/_deps/*-src
          key: QDash

      - name: Set up Python 3.8 
        uses: actions/setup-python@v5
        with:
          python-version: 3.8
          cache: 'pip'

      - name: Install Dependencies
        run: |
          brew update
          brew install llvm ninja qt@6
          pip install jinja2

      - name: Configure & Build
        run: |
          export USE_CCACHE=true
          export BUILD_TYPE=${{ inputs.build_type }}

          chmod a+x .ci/macos/build.sh
          .ci/macos/build.sh

      - name: Package
        run: |
          export PATH="$PATH;$(brew --prefix qt@6)/bin"
          export QML_SOURCES_PATHS="$(brew --prefix qt@6)/share/qt/qml"

          chmod a+x .ci/macos/package.sh
          .ci/macos/package.sh

      - name: Upload app
        uses: actions/upload-artifact@v4
        with:
          name: macos-universal
          path: QDash.tar.gz
